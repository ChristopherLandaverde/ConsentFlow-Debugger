# GTM Consent Mode Inspector - Cursor Rules

## Project Context
You are working on a Chrome Extension (Manifest V3) that helps developers debug Google Tag Manager Consent Mode implementations. This is a developer-first tool with a DevTools-like experience for inspecting consent signals and tag firing behavior.

## Architecture Overview
- **Background Service Worker**: Manages extension lifecycle, tab tracking, and message routing
- **Content Script**: Bridge between page context and extension popup
- **Injected Script**: Runs in page context to access GTM/consent APIs directly
- **Popup Interface**: Modular UI with tabs for different debugging features
- **Page Overlay**: Optional visual debugging overlay

## Tech Stack & Patterns
- Chrome Extension Manifest V3
- Vanilla JavaScript (no frameworks)
- Modular IIFE pattern for popup components
- Message passing: Background ↔ Content Script ↔ Injected Script
- Chrome APIs: scripting, tabs, storage, contextMenus

## Code Style Guidelines

### JavaScript Patterns
- Use IIFE pattern for popup modules: `const ModuleName = (function() { ... })()`
- Prefer async/await over .then() chains
- Use chrome.* APIs (not deprecated webkit/vendor prefixes)
- Content script message passing with Promise wrappers and timeout handling
- Page context injection via chrome.runtime.getURL()

### Architecture Conventions
- **Background Script**: Lightweight service worker, memory leak prevention, tab cleanup
- **Content Script**: Message relay only, minimal DOM interaction
- **Injected Script**: All GTM/consent detection and manipulation
- **Popup Modules**: Initialize with contentInterface parameter

### Message Passing Structure
```javascript
// Content Script Pattern
const response = await chrome.tabs.sendMessage(tabId, { 
  action: 'actionName',
  data: payload 
});

// Page Context Pattern  
window.addEventListener('message', function(event) {
  if (event.data.source === 'gtm-inspector-content') {
    // Handle message with ID-based response system
  }
});